/*
 * Generated by ASN.1 Java Compiler (https://www.asnlab.org/)
 * From ASN.1 module "Platoon"
 */
package com.iot.nero.smartcan.entity.platoon;

import java.io.*;
import javax.validation.constraints.*;
import org.asnlab.asndt.runtime.conv.*;
import org.asnlab.asndt.runtime.conv.annotation.*;
import org.asnlab.asndt.runtime.type.AsnType;
import org.asnlab.asndt.runtime.value.*;

public class ResponseErrorCode {

	public static void ber_encode(byte[] object, OutputStream out) throws IOException {
		TYPE.encode(object, EncodingRules.BASIC_ENCODING_RULES, CONV, out);
	}

	public static byte[] ber_decode(InputStream in) throws IOException {
		return (byte[])TYPE.decode(in, EncodingRules.BASIC_ENCODING_RULES, CONV);
	}

	public static void cer_encode(byte[] object, OutputStream out) throws IOException {
		TYPE.encode(object, EncodingRules.CANONICAL_ENCODING_RULES, CONV, out);
	}

	public static byte[] cer_decode(InputStream in) throws IOException {
		return (byte[])TYPE.decode(in, EncodingRules.CANONICAL_ENCODING_RULES, CONV);
	}

	public static void der_encode(byte[] object, OutputStream out) throws IOException {
		TYPE.encode(object, EncodingRules.DISTINGUISHED_ENCODING_RULES, CONV, out);
	}

	public static byte[] der_decode(InputStream in) throws IOException {
		return (byte[])TYPE.decode(in, EncodingRules.DISTINGUISHED_ENCODING_RULES, CONV);
	}

	public static void per_encode(byte[] object, boolean align, OutputStream out) throws IOException {
		TYPE.encode(object, align? EncodingRules.ALIGNED_PACKED_ENCODING_RULES:EncodingRules.UNALIGNED_PACKED_ENCODING_RULES, CONV, out);
	}

	public static byte[] per_decode(boolean align, InputStream in) throws IOException {
		return (byte[])TYPE.decode(in, align? EncodingRules.ALIGNED_PACKED_ENCODING_RULES:EncodingRules.UNALIGNED_PACKED_ENCODING_RULES, CONV);
	}


	public final static AsnType TYPE = Platoon.type(65537);

	public final static AsnConverter CONV = OctetStringConverter.INSTANCE;



}
