/*
 * Generated by ASN.1 Java Compiler (https://www.asnlab.org/)
 * From ASN.1 module "Platoon"
 */
package com.iot.nero.smartcan.entity.platoon;

import java.io.*;
import java.math.*;
import javax.validation.constraints.*;
import org.asnlab.asndt.runtime.conv.*;
import org.asnlab.asndt.runtime.conv.annotation.*;
import org.asnlab.asndt.runtime.type.AsnType;
import org.asnlab.asndt.runtime.value.*;

public class RecongnizeObject {

	@NotNull
	@Component(0)
	public Long id;

	@NotNull
	@Component(1)
	public XTypeEnum type;

	@NotNull
	@Component(2)
	public Double x;

	@NotNull
	@Component(3)
	public Double y;

	@NotNull
	@Component(4)
	public Double speedx;

	@NotNull
	@Component(5)
	public Double speedy;

	@NotNull
	@Component(6)
	public Double width;

	@NotNull
	@Component(7)
	public Double length;

	@NotNull
	@Component(8)
	public Double heigth;

	@NotNull
	@Component(9)
	public Double longAngle;

	@NotNull
	@Component(10)
	public Double latAngle;

	@NotNull
	@Component(11)
	public Double yawAngle;


	public Object clone() {
		return TYPE.clone(this, CONV);
	}

	public boolean equals(Object obj) {
		if(!(obj instanceof RecongnizeObject)){
			return false;
		}
		return TYPE.equals(this, obj, CONV);
	}

	public void print(PrintStream out) {
		TYPE.print(this, CONV, out);
	}

	public void ber_encode(OutputStream out) throws IOException {
		TYPE.encode(this, EncodingRules.BASIC_ENCODING_RULES, CONV, out);
	}

	public static RecongnizeObject ber_decode(InputStream in) throws IOException {
		return (RecongnizeObject)TYPE.decode(in, EncodingRules.BASIC_ENCODING_RULES, CONV);
	}

	public void cer_encode(OutputStream out) throws IOException {
		TYPE.encode(this, EncodingRules.CANONICAL_ENCODING_RULES, CONV, out);
	}

	public static RecongnizeObject cer_decode(InputStream in) throws IOException {
		return (RecongnizeObject)TYPE.decode(in, EncodingRules.CANONICAL_ENCODING_RULES, CONV);
	}

	public void der_encode(OutputStream out) throws IOException {
		TYPE.encode(this, EncodingRules.DISTINGUISHED_ENCODING_RULES, CONV, out);
	}

	public static RecongnizeObject der_decode(InputStream in) throws IOException {
		return (RecongnizeObject)TYPE.decode(in, EncodingRules.DISTINGUISHED_ENCODING_RULES, CONV);
	}

	public void per_encode(boolean align, OutputStream out) throws IOException {
		TYPE.encode(this, align? EncodingRules.ALIGNED_PACKED_ENCODING_RULES:EncodingRules.UNALIGNED_PACKED_ENCODING_RULES, CONV, out);
	}

	public static RecongnizeObject per_decode(boolean align, InputStream in) throws IOException {
		return (RecongnizeObject)TYPE.decode(in, align? EncodingRules.ALIGNED_PACKED_ENCODING_RULES:EncodingRules.UNALIGNED_PACKED_ENCODING_RULES, CONV);
	}


	public final static AsnType TYPE = Platoon.type(65584);

	public final static CompositeConverter CONV;

	static {
		CONV = new AnnotationCompositeConverter(RecongnizeObject.class);
		AsnConverter idConverter = LongConverter.INSTANCE;
		AsnConverter typeConverter = XTypeEnum.CONV;
		AsnConverter xConverter = DoubleConverter.INSTANCE;
		AsnConverter yConverter = DoubleConverter.INSTANCE;
		AsnConverter speedxConverter = DoubleConverter.INSTANCE;
		AsnConverter speedyConverter = DoubleConverter.INSTANCE;
		AsnConverter widthConverter = DoubleConverter.INSTANCE;
		AsnConverter lengthConverter = DoubleConverter.INSTANCE;
		AsnConverter heigthConverter = DoubleConverter.INSTANCE;
		AsnConverter longAngleConverter = DoubleConverter.INSTANCE;
		AsnConverter latAngleConverter = DoubleConverter.INSTANCE;
		AsnConverter yawAngleConverter = DoubleConverter.INSTANCE;
		CONV.setComponentConverters(new AsnConverter[] { idConverter, typeConverter, xConverter, yConverter, speedxConverter, speedyConverter, widthConverter, lengthConverter, heigthConverter, longAngleConverter, latAngleConverter, yawAngleConverter });
	}


}
