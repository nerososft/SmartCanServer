/*
 * Generated by ASN.1 Java Compiler (https://www.asnlab.org/)
 * From ASN.1 module "Platoon"
 */
package com.iot.nero.smartcan.entity.platoon;

import java.io.*;
import java.math.*;
import javax.validation.constraints.*;
import org.asnlab.asndt.runtime.conv.*;
import org.asnlab.asndt.runtime.conv.annotation.*;
import org.asnlab.asndt.runtime.type.AsnType;
import org.asnlab.asndt.runtime.value.*;

public class SmartControlRequestMessage {

	@NotNull
	@Component(0)
	public Long msgCnt;

	@NotNull
	@Component(1)
	public byte[] token;

	@NotNull
	@Size(min=8, max=8)
	@Component(2)
	public byte[] vid;

	@NotNull
	@Component(3)
	public Double steering;

	@NotNull
	@Component(4)
	public Double rotation;

	@NotNull
	@Component(5)
	public Double speed;

	@NotNull
	@Component(6)
	public Double time;

	@NotNull
	@Component(7)
	public Double distance;

	@NotNull
	@Component(8)
	public MODEL model;

	@NotNull
	@Component(9)
	public Double throttle;

	@NotNull
	@Component(10)
	public TransmissionState transmission;

	@NotNull
	@Component(11)
	public ExteriorLights light;

	@NotNull
	@Component(12)
	public Double pressure;

	@NotNull
	@Component(13)
	public HornStatus horn;

	@NotNull
	@Component(14)
	public byte[] timestamp;

	@NotNull
	@Component(15)
	public Long syncNum;


	public Object clone() {
		return TYPE.clone(this, CONV);
	}

	public boolean equals(Object obj) {
		if(!(obj instanceof SmartControlRequestMessage)){
			return false;
		}
		return TYPE.equals(this, obj, CONV);
	}

	public void print(PrintStream out) {
		TYPE.print(this, CONV, out);
	}

	public void ber_encode(OutputStream out) throws IOException {
		TYPE.encode(this, EncodingRules.BASIC_ENCODING_RULES, CONV, out);
	}

	public static SmartControlRequestMessage ber_decode(InputStream in) throws IOException {
		return (SmartControlRequestMessage)TYPE.decode(in, EncodingRules.BASIC_ENCODING_RULES, CONV);
	}

	public void cer_encode(OutputStream out) throws IOException {
		TYPE.encode(this, EncodingRules.CANONICAL_ENCODING_RULES, CONV, out);
	}

	public static SmartControlRequestMessage cer_decode(InputStream in) throws IOException {
		return (SmartControlRequestMessage)TYPE.decode(in, EncodingRules.CANONICAL_ENCODING_RULES, CONV);
	}

	public void der_encode(OutputStream out) throws IOException {
		TYPE.encode(this, EncodingRules.DISTINGUISHED_ENCODING_RULES, CONV, out);
	}

	public static SmartControlRequestMessage der_decode(InputStream in) throws IOException {
		return (SmartControlRequestMessage)TYPE.decode(in, EncodingRules.DISTINGUISHED_ENCODING_RULES, CONV);
	}

	public void per_encode(boolean align, OutputStream out) throws IOException {
		TYPE.encode(this, align? EncodingRules.ALIGNED_PACKED_ENCODING_RULES:EncodingRules.UNALIGNED_PACKED_ENCODING_RULES, CONV, out);
	}

	public static SmartControlRequestMessage per_decode(boolean align, InputStream in) throws IOException {
		return (SmartControlRequestMessage)TYPE.decode(in, align? EncodingRules.ALIGNED_PACKED_ENCODING_RULES:EncodingRules.UNALIGNED_PACKED_ENCODING_RULES, CONV);
	}


	public final static AsnType TYPE = Platoon.type(65594);

	public final static CompositeConverter CONV;

	static {
		CONV = new AnnotationCompositeConverter(SmartControlRequestMessage.class);
		AsnConverter msgCntConverter = LongConverter.INSTANCE;
		AsnConverter tokenConverter = Token.CONV;
		AsnConverter vidConverter = OctetStringConverter.INSTANCE;
		AsnConverter steeringConverter = DoubleConverter.INSTANCE;
		AsnConverter rotationConverter = DoubleConverter.INSTANCE;
		AsnConverter speedConverter = DoubleConverter.INSTANCE;
		AsnConverter timeConverter = DoubleConverter.INSTANCE;
		AsnConverter distanceConverter = DoubleConverter.INSTANCE;
		AsnConverter modelConverter = MODEL.CONV;
		AsnConverter throttleConverter = DoubleConverter.INSTANCE;
		AsnConverter transmissionConverter = TransmissionState.CONV;
		AsnConverter lightConverter = ExteriorLights.CONV;
		AsnConverter pressureConverter = DoubleConverter.INSTANCE;
		AsnConverter hornConverter = HornStatus.CONV;
		AsnConverter timestampConverter = TimeStamp.CONV;
		AsnConverter syncNumConverter = LongConverter.INSTANCE;
		CONV.setComponentConverters(new AsnConverter[] { msgCntConverter, tokenConverter, vidConverter, steeringConverter, rotationConverter, speedConverter, timeConverter, distanceConverter, modelConverter, throttleConverter, transmissionConverter, lightConverter, pressureConverter, hornConverter, timestampConverter, syncNumConverter });
	}


}
